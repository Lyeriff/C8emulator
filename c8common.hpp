#include <iostream>
#include <fstream>
#include <cstdlib>
#include <time.h>
#include <stdlib.h>


typedef char BYTE;
typedef unsigned short BYTES_2;
typedef std::uint8_t BYTE_8;
typedef std::uint16_t BYTE_16;

const BYTES_2 nibble_dex[4] = {0xf000, 0xf00, 0xf0, 0xf};
const BYTE VIDEO_WIDTH = 64;
const BYTE VIDEO_HEIGHT = 32;


BYTE_16 last_n_bits(BYTE_16 opc, BYTE n){
    return opc & ((1 << n) - 1);
}


BYTE_16 nth_nibble(BYTE_16 opc, BYTE n){
    //WARNING RETURNED VALUE ISNT SHIFTED
    return opc & nibble_dex[n-1];
}

uint8_t fontset[80] =
{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};


std::string byte_to_binary(int num){
    std::string str;
    while(num){
      if(num & 1)
        str+='1';
      else
        str+='0';
      num>>=1;
    }   
    return str;
}
 
void reverse_and_print(std::string str){
    for(int i=str.size()-1 ; i>=0 ; i--)
        if(str[i]=='1')
            std::cout<<str[i];
        else
            std::cout<<" ";
    std::cout<<'\n';
}
